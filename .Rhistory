}
if(myfamily=="Gamma"){
link       <- function(mu){return(1/mu)}
linkinv    <- function(eta){return(1/eta)}
dlink      <- function(mu){return(-1/mu^2)}
a          <- function(phi=1){return(-1)}
V          <- function(theta){return(-1/theta^2)} #b''(theta)
mu_fun     <- function(theta){return(1/theta)} #b'(theta)
eta_fun    <- function(X,beta){return(beta[1]+beta[2]*X[,2])}
}
if(myfamily=="binomial"){
link       <- function(mu){return(log(mu/(1+mu)))}
linkinv    <- function(eta){return(exp(eta)/(1+exp(eta)))}
dlink      <- function(mu){return(1/(mu*(1-mu)))}
a          <- function(phi=1){return(1)}
V          <- function(theta){return(exp(theta)/(1+exp(theta))^2)} #b''(theta)
mu_fun     <- function(theta){return(exp(theta)/(1+exp(theta)))} #b'(theta)
eta_fun    <- function(X,beta){return(beta[1]+beta[2]*X[,2])}
}
########IWLS###########
iwls<-function(y,X,phi){
###Step 1 (Initialisation)
##a)
N  <-length(y)
mu <- y + 0.1
eta<- link(mu)
##b)
Z  <- eta+(y-mu)*dlink(mu)
##c)
w      <- 1/(a(phi)*dlink(mu)^2*V(mu))
W      <- matrix(0,nrow=N,ncol=N)
diag(W)<- w
##d)
beta<-solve(t(X)%*%W%*%X,t(X)%*%W%*%Z)
###Step 2 (Algorithm)
for(i in 1:100){
progress(i)
Sys.sleep(0.01)
##a)
beta_old <- beta
eta      <- eta_fun(X,beta)
mu       <- linkinv(eta)
Z        <- eta +(y-mu)*dlink(mu)
##b)
w        <- 1/(a(phi)*dlink(mu)^2*V(mu))
W        <- matrix(0,nrow=N,ncol=N)
diag(W)  <- w
if(is.singular.matrix(W)==TRUE) diag(W)<-diag(W)+0.001
##c)
beta     <- qr.solve(t(X)%*%W%*%X,t(X)%*%W%*%Z)
conv.test<- all(abs(beta-beta_old)<1e-5)
#lines(x,eta_fun(X,beta),col=i)
if(conv.test==TRUE) cat(paste("Done! Iterations required = ",i))
if(conv.test==TRUE) break
}
return(beta)
}
plot_result <- function(x,y,beta_est,beta_real,binom=FALSE){
par(mfrow=c(1,1))
x       <- sort(x)
X       <- cbind(1,x)
eta_est <-eta_fun(X,beta_est)
eta_real<-eta_fun(X,beta_real)
if(binom==TRUE){
plot(y~x)
legend("topleft",c("est","real"),col=c(2,3),lty=c(2,3),lwd=2)
mu_est <-linkinv(eta_est)
mu_real <-linkinv(eta_real)
lines(x,mu_est,col=2,lty=2,lwd=2)
lines(x,mu_real,col=3,lty=3,lwd=2)
}else{
plot(link(y)~x)
legend("topright",c("est","real"),col=c(2,3),lty=c(2,3),lwd=2)
lines(x,eta_est,col=2,lty=2,lwd=2)
lines(x,eta_real,col=3,lty=3,lwd=2)
}
}
}
myfamily
###Step 1 (Initialisation)
##a)
N  <-length(y)
mu <- y + 0.1
eta<- link(mu)
##b)
Z  <- eta+(y-mu)*dlink(mu)
##c)
w      <- 1/(a(phi)*dlink(mu)^2*V(mu))
W      <- matrix(0,nrow=N,ncol=N)
diag(W)<- w
##d)
beta<-solve(t(X)%*%W%*%X,t(X)%*%W%*%Z)
beta
for(i in 1:100){
progress(i)
Sys.sleep(0.01)
##a)
beta_old <- beta
eta      <- eta_fun(X,beta)
mu       <- linkinv(eta)
Z        <- eta +(y-mu)*dlink(mu)
##b)
w        <- 1/(a(phi)*dlink(mu)^2*V(mu))
W        <- matrix(0,nrow=N,ncol=N)
diag(W)  <- w
if(is.singular.matrix(W)==TRUE) diag(W)<-diag(W)+0.001
##c)
beta     <- qr.solve(t(X)%*%W%*%X,t(X)%*%W%*%Z)
conv.test<- all(abs(beta-beta_old)<1e-5)
#lines(x,eta_fun(X,beta),col=i)
if(conv.test==TRUE) cat(paste("Done! Iterations required = ",i))
if(conv.test==TRUE) break
}
beta
# From GLM
X <- cbind(1, 1:10)
X
W <- diag(1:10/10)
W
z <- sample(1:10)
z
set.seed(7)
z <- sample(1:10)
z
betahat <- solve(t(X)%*%W%*%X, t(X)%*%W%*%z)
betahat
# Answer using Choleski
result <- matrix(nrow=10000, ncol=length(betahat))
C <- chol(t(X)%*%W%*%X)
C
# Answer using Choleski
result <- matrix(nrow=10000, ncol=length(betahat))
C <- chol(t(X)%*%W%*%X)
for (i in 1:nrow(result)) {
v <- rnorm(length(betahat))
result[i,] <- betahat + solve(C, v)
}
result
colMeans(result)
betahat
cov(result)
solve(t(X)%*%W%*%X)
QR <- qr(sqrt(W)%*%X)
QR
qr.coef(QR, sqrt(W)%*%z)
?qr.coef
qr.coef(qr(sqrt(W)%*%X)
qr(sqrt(W)%*%X)
qr(sqrt(W)%*%X), sqrt(W)%*%z)
QR <- qr(sqrt(W)%*%X)
QR <- qr(sqrt(W)%*%X)
betahat <- c(qr.coef(QR, sqrt(W)%*%z))
betahat
sqrt(W)
QR <- qr(sqrt(W)%*%X)
QR
QR$qr
QR
qr.R(QR)
qr.Q(QR)
qr.Q(QR)%*%qr.R(QR)
sqrt(W)%*%X
qr(sqrt(W)%*%X), sqrt(W)%*%z)
qr(sqrt(W)%*%X)
qr.coef(qr(sqrt(W)%*%X), sqrt(W)%*%z)
qr(sqrt(W)%*%X)
qr(sqrt(W)%*%X)
qr_econ(Q,R,X)$q
qr_econ(Q,R,X)$qr
QR <- qr(sqrt(W)%*%X)
QR$qr
betahat <- c(qr.coef(qr(sqrt(W)%*%X), sqrt(W)%*%z))
betahat
X <- cbind(1, 1:10)
W <- diag(1:10/10)
set.seed(7)
z <- sample(1:10)
betahat <- solve(t(X)%*%W%*%X, t(X)%*%W%*%z)
Sigma <- solve(t(X)%*%W%*%X)
QR <- qr(sqrt(W)%*%X)
betahat <- c(qr.coef(QR, sqrt(W)%*%z))
result <- matrix(nrow=10000, ncol=length(betahat))
for (i in 1:nrow(result)) {
v <- rnorm(length(betahat))
result[i,] <- betahat + backsolve(qr.R(QR), v)
}
qr.R(QR)
155000*(1.06)^5
155000*1.06
value<-155000
value5<-value*(1.06)^5
value5
value5-126400
value5-126400-value5*0.05
value5-126400-value5*0.05-20000
value5<-value*1.1
value5-126400-value5*0.05-20000
value5
Sigma<-matrix(c(0.5,1,1,2),byrow=TRUE,ncol=2)
Sigma
t(Sigma)
sqrt(Sigma)
sqrt(Sigma)*sqrt(Sigma)
sqrt(Sigma)*t(sqrt(Sigma))
solve(Sigma)
Sigma
Sigma[1,1]<-5
solve(Sigma)
solve(sqrt(Sigma))*solve(sqrt(Sigma))
Sigma^(-0.5)*Sigma^(-0.5)
Sigma
solve(Sigma)
y<-(0.1, 12, 2.3, 4.7, 0.5, 16, 7.3, 8, 0.9, 0.1)
y<-c(0.1, 12, 2.3, 4.7, 0.5, 16, 7.3, 8, 0.9, 0.1)
x<-1:10
testbeta<-c(2,3)
Sigma<-matrix(c(1,0.5,0.5,3))
Sigma<-matrix(c(1,0.5,0.5,3),ncol=2)
Sigma
testbeta
eta<-testbeta[1]+testbeta[2]*x
eta
library("mvtnorm")
dmvnorm(y,eta,sigma = )
dmvnorm(y,eta,Sigma)
betaprop<-c(3,)
betaprop<-c(3,4)
dmvnorm(betaprop,testbeta,Sigma)
x
y
testbeta
betaprop
dmvnorm(betaprop,testbeta,Sigma)
det(Sigma)
1/((2*pi)^1*sqrt(det(Sigma)))*exp(-0.5*t(betaprop-testbeta)*solve(Sigma)*(response-mean))
1/((2*pi)^1*sqrt(det(Sigma)))
t(betaprop-testbeta)
solve(Sigma)
dim(t(betaprop-testbeta))
1/((2*pi)^1*sqrt(det(Sigma)))*exp(-0.5*t(betaprop-testbeta)%*%solve(Sigma)%*%(response-mean))
1/((2*pi)^1*sqrt(det(Sigma)))*exp(-0.5*t(betaprop-testbeta)%*%solve(Sigma)%*%(betaprop-testbeta))
dmvnorm(betaprop,testbeta,Sigma)
dmvnorm(betaprop,testbeta,Sigma,log=TRUE)
lm(y~x)
summary(lm(y~x))
log(0.6/(1-0.6))
Sigma_beta<-matrix(c(1,0,0,1),byrow=TRUE,ncol=2)
Sigma_beta
solve(Sigma_beta)
sqrt(solve(Sigma_beta))
?sqrt
sqrtm(Sigma_beta)
install.packages("expm")
sqrtm(Sigma_beta)
library(expm)
sqrtm(Sigma_beta)
Sigma_beta<-matrix(c(2,0,0,0.3),byrow=TRUE,ncol=2)
Sigma_beta
solve(Sigma_beta)
sqrtm(solve(Sigma_beta))
x<-seq(from=0,to=5,length.out = 100)
x
y<-sin(x)
y
plot(y~x)
x<-seq(from=0,to=10,length.out = 100)
y<-sin(x)
plot(y~x)
y<-y+rnorm(100)
plot(y~x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.5)
plot(y~x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.05)
plot(y~x)
x<-seq(from=0,to=10,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.01)
plot(y~x)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.5)
plot(y~x)
x<-seq(from=0,to=10,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.25)
plot(y~x)
data<-data.frame(y,x)
data
getwd()
write.csv(data,file = "data_sin")
write.csv(data,file = "data_sin,csv")
write.csv(data,file = "data_sin.csv")
write.csv(data,file = "data_sin.csv",row.names = FALSE,col.names = FALSE)
write.csv(data,file = "data_sin.csv",row.names = FALSE,col.names = NULL)
write.table(data,file = "data_sin.csv",row.names = FALSE,col.names = FALSE)
write.table(data,sep=",",file = "data_sin.csv",row.names = FALSE,col.names = FALSE)
x_new<-sq(from=0,to=10,length.out=20)
x_new<-seq(from=0,to=10,length.out=20)
write.table(x_new,sep=",",file = "x_new.csv",row.names = FALSE,col.names = FALSE)
sum( 1.5953e-03,   5.0950e-04,  -9.8940e-06,  -1.6629e-03,   1.7517e-03,   2.2297e-03)
sum(-1.7499e-04,   1.1271e-04,   2.4426e-03,   1.3353e-02,  -1.2793e-02,  -2.2617e-05)
P<-read.csv("P.csv")
P
plot(P[nrow(P),]~x_new)
nrow(P)
P[nrow(P),]
plot(x_new,P[nrow(P),])
plot(X_new,apply(P,2,mean))
plot(x_new,apply(P,2,mean))
plot(x_new,P[nrow(P),])
x_new<-seq(from=0,to=10,length.out=150)
write.table(x_new,sep=",",file = "x_new.csv",row.names = FALSE,col.names = FALSE)
P<-read.csv("P.csv")
plot(x_new,P[nrow(P),])
plot(y~x)
plot(x_new,P[nrow(P),])
P<-read.csv("P.csv")
plot(x_new,P[nrow(P),])
plot(y~x)
plot(x_new,P[nrow(P),])
lines(x_new,0.0022+0.0088*x_new)
lines(x_new,0.0028+0.0021*x_new,col=2)
lines(x_new,-0.0012+0.0030*x_new,col=3)
plot(x_new,P[nrow(P),])
plot(y~x)
lines(x_new,0.0022+0.0088*x_new)
lines(x_new,0.0028+0.0021*x_new,col=2)
lines(x_new,-0.0012+0.0030*x_new,col=3)
plot(x_new,P[nrow(P),])
lines(x_new,0.0022+0.0088*x_new)
lines(x_new,0.0028+0.0021*x_new,col=2)
lines(x_new,-0.0012+0.0030*x_new,col=3)
x<-seq(from=-5,to=55,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.25)
plot(y~x)
data<-data.frame(y,x)
data
write.table(data,sep=",",file = "data_sin.csv",row.names = FALSE,col.names = FALSE)
x_new<-seq(from=-5,to=5,length.out=150)
write.table(x_new,sep=",",file = "x_new.csv",row.names = FALSE,col.names = FALSE)
plot(y~x)
x<-seq(from=-5,to=55,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.25)
plot(y~x)
x<-seq(from=-5,to=5,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.25)
plot(y~x)
data<-data.frame(y,x)
data
getwd()
write.table(data,sep=",",file = "data_sin.csv",row.names = FALSE,col.names = FALSE)
x<-seq(from=-5,to=5,length.out = 100)
y<-sin(x)
y<-y+rnorm(n = 100,mean = 0,sd = 0.25)
plot(y~x)
data<-data.frame(y,x)
data
x_new<-seq(from=-5,to=5,length.out=150)
P<-read.csv("P.csv")
plot(x_new,P[nrow(P),])
plot(y~x)
lines(x_new,0.0022+0.0088*x_new)
plot(y~x)
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(x_new,P[nrow(P),])
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(x_new,ylim=c(0.0001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(xlim=c(-5,5),ylim=c(0.0001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
plot(xlim=c(-5,5),ylim=c(0.0001,0.002),type="n")
plot.new()
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(0,xlim=c(-5,5),ylim=c(0.0001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(0,xlim=c(-5,5),ylim=c(0.00001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(y~x)
plot(0,xlim=c(-5,5),ylim=c(0.00001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(y~x)
plot(x_new,P[nrow(P),])
plot(0,xlim=c(-5,5),ylim=c(0.00001,0.002),type="n")
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
plot(y~x)
lines(x_new,0.0025+0.0025*x_new)
lines(x_new,0.0019-0.0016*x_new,col=2)
lines(x_new,-0.0015+0.0007*x_new,col=3)
2^20
factorial(10)
## 1
cov.mc = function(n){
if(n < 1) stop('n should be at least 1')
u = runif(n)
e = exp(u)
UE = mean(u*e)
U = mean(u)
E = mean(e)
UE - U*E
}
## 2
theta = 3/2 - exp(1)/2
set.seed(3)
theta.hat = cov.mc(5000)
abs(theta - theta.hat)
## [1] 0.0004697047
## 3
sampleN = function(k){
N = rep(NA, k)
for(j in 1:k){
n = 0 # starting value for N. Will be updated
v = 1 # auxiliary variable used to multiply
while(TRUE){
u = runif(1)
f = prod(v,u)
if(f >= exp(-3)){
v = f
n = n + 1
}else break
}
N[j] = n
}N
}
## 4
set.seed(3)
Nsamp = sampleN(20000)
## [1] 0.0004697047
## 3
sampleN = function(k){
N = rep(NA, k)
for(j in 1:k){
n = 0 # starting value for N. Will be updated
v = 1 # auxiliary variable used to multiply
while(TRUE){
u = runif(1)
f = prod(v,u)
if(f >= exp(-3)){
v = f
n = n + 1
}else break
}
N[j] = n
}
N
}
## 4
set.seed(3)
Nsamp = sampleN(20000)
mean(Nsamp == 3)
setwd("C:/Users/Ivona Voroneckaja/Desktop/MoE/MoE")
data<-read.csv("data_sin_stand.csv",header = FALSE)
y<-data[,1]
X<-data[,2:3]
x<-data[,3]
z_before<-read.csv("z_before.csv",header=FALSE)
z_before<-z_before[,1]
plot(x,y,col=z_before,pch=20, main="Starting point")
abline(lm(y[z_before==1]~x[z_before==1]))
abline(lm(y[z_before==2]~x[z_before==2]),col=2)
z_afterSplit<-read.csv("z_afterSplit.csv",header=FALSE)
z_afterSplit<-z_afterSplit[,1]
abline(v=1.66667,col="grey")
gamma<-c(15.0697,-8.87489)
lines(x,(exp(gamma[1]+gamma[2]*x)/(1+exp(gamma[1]+gamma[2]*x)))*3.2-1.5,lty=2,col="grey")
plot(x,y,col=z_afterSplit,pch=20, main="After Split")
abline(v=1.66667,col="grey")
lines(x,(exp(gamma[1]+gamma[2]*x)/(1+exp(gamma[1]+gamma[2]*x)))*3.2-1.5,lty=2,col="grey")
beta1<-c(-1.8061,-0.6532)
beta2<-c(2.8086,-0.9263)
beta3<-c(0.4112,0.5580)
lines(x,beta1[1]+beta1[2]*x)
lines(x,beta2[1]+beta2[2]*x,col=2)
lines(x,beta3[1]+beta3[2]*x,col=3)
z_afterMCMC<-read.csv("z_MCMCRJ.csv",header=FALSE)
z_afterMCMC<-z_afterMCMC[,1]
plot(x,y,col=z_afterMCMC,pch=20, main="After RJ MCMC")
z_before<-read.csv("z_for_merge.csv",header=FALSE) #case 2
z_before<-z_before[,1]
plot(x,y,col=z_before,pch=20, main="Starting point")
z_afterMCMC<-read.csv("z_MCMCRJ.csv",header=FALSE)
z_afterMCMC<-z_afterMCMC[,1]
plot(x,y,col=z_afterMCMC,pch=20, main="After RJ MCMC")
z_before<-read.csv("z_4exp_merge.csv",header=FALSE) #case 3
z_before<-z_before[,1]
plot(x,y,col=z_before,pch=20, main="Starting point")
z_afterMCMC<-read.csv("z_MCMCRJ.csv",header=FALSE)
z_afterMCMC<-z_afterMCMC[,1]
plot(x,y,col=z_afterMCMC,pch=20, main="After RJ MCMC")
z_before<-read.csv("z_4exp_merge.csv",header=FALSE) #case 3
z_before<-z_before[,1]
plot(x,y,col=z_before,pch=20, main="Starting point")
z_afterMCMC<-read.csv("z_MCMCRJ.csv",header=FALSE)
z_afterMCMC<-z_afterMCMC[,1]
plot(x,y,col=z_afterMCMC,pch=20, main="After RJ MCMC")
